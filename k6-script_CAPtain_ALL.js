// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { group } from "k6";

export let options = { maxRedirects: 4 , iterations: 1, vus: 1};

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    locations_url:
      "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1",
    services_url:
      "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1",
    orders_url:
      "https://jeff7p7cr3.execute-api.us-east-2.amazonaws.com/dev/api/v1",
    quotes_url:
      "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1",
    users_url:
      "https://f58dmh4t25.execute-api.us-east-2.amazonaws.com/Prod/api/v1",
    quote_id: "1185336",
    sfid: "0016000000unFcJAAU",
    email: "tranzactdemo@zayo.com",
    quote_ids: "11234",
    eligible: "Y",
    location_id: "00a100000001ab1",
    name: "Port Pop 1 AWS",
    bandwidth: "1 Gbps",
    disconnect_reason: "Competitive Loss",
    service_id: null,
    term: "Month-to-Month",
    building_id: null,
    demarc_id: "a0b10000001A1a1",
    monitoring: null,
    csp_account_id: "00b100000001ab1",
    csp_service_key: "123456-789-789404890",
    destination_id: "z0b10000001A1a1",
    destination_type: "Hosted",
    product: "Ethernet",
    username: "tranzactdemo@zayo.com",
    password: "mockPassword"
  }
});

export default function() {
  group("/locations", function() {
    postman[Request]({
      name: "CAPtain/locations/get_locations_by_sfid/all",
      id: "d645f9e7-5f1e-43ac-baa7-9657dc4e5043",
      method: "GET",
      address: "{{locations_url}}/locations/get_locations_by_sfid/all",
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("locations_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("status");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");
              pm.expect(pm.response.text()).to.include("latitude");
              pm.expect(pm.response.text()).to.include("longitude");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/locations/get_location_detail/all",
      id: "f0df1feb-b1d9-4982-b57b-13705f480f27",
      method: "GET",
      address: "{{locations_url}}/locations/get_location_detail/all",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("locations_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("status");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");
              pm.expect(pm.response.text()).to.include("product");
              pm.expect(pm.response.text()).to.include("circuit_id");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("start_date");
              pm.expect(pm.response.text()).to.include("monthly_cost");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/locations/get_locations_by_service_id/all",
      id: "31599f9f-efd4-4ed3-a9c2-0acdb0a379c0",
      method: "GET",
      address: "{{locations_url}}/locations/get_locations_by_service_id/all",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("locations_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("status");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/locations/get_buildings/all",
      id: "d4024f2d-1315-445c-9ef7-c4086d3a546e",
      method: "GET",
      address: "{{locations_url}}/locations/get_buildings/all",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("locations_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("building_name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");
              pm.expect(pm.response.text()).to.include("type");
              pm.expect(pm.response.text()).to.include("network");
              pm.expect(pm.response.text()).to.include("entrance");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/locations/get_demarcs_by_building_id/all",
      id: "b960c34d-3a5d-40b0-b1d6-fa69ce0c82ea",
      method: "GET",
      address: "{{locations_url}}/locations/get_demarcs_by_building_id/all",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("locations_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("demarc");
              pm.expect(pm.response.text()).to.include("operator");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("type");
              pm.expect(pm.response.text()).to.include("network");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/locations/get_csp_destinations",
      id: "d94417eb-73d2-48d2-b895-36f631089c30",
      method: "GET",
      address:
        "{{locations_url}}/locations/get_csp_destinations?connection_type=hosted&account_id=a0a100000001ab1",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("locations_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("csp_account_name");
              pm.expect(pm.response.text()).to.include("destination_name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/locations/change_location_name",
      id: "7f9d10a5-00e7-4e2c-82ad-61cc9a11b324",
      method: "POST",
      address: "{{locations_url}}/locations/change_location_name",
      data:
        '{\r\n  "location_id" : "{{location_id}}",\r\n  "name" : "{{name}}"\r\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"

        pm.environment.set("location_id", "a0a100000001ab1");
        pm.environment.set("name", "Port Pop 2");

        pm.environment.get("locations_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        //environment variables dynamically set via JSON body ("location_id" : "a0a100000001ab1", "name" : "Port Pop 2") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful POST request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("POST request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include(
                "Location name has changed"
              );
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });
  });

  group("/services", function() {
    postman[Request]({
      name: "CAPtain/services/get_services_by_sfid/all",
      id: "dfbee85d-1feb-48e4-a65d-ffa76970fbe0",
      method: "GET",
      address: "{{services_url}}/services/get_services_by_sfid/all",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("services_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("services_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("status");
              pm.expect(pm.response.text()).to.include("service_id");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("product_group");
              pm.expect(pm.response.text()).to.include("product");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("circuit_id");
              pm.expect(pm.response.text()).to.include("start_date");
              pm.expect(pm.response.text()).to.include("monthly_cost");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/services/get_service_detail/all",
      id: "a6d84239-3844-4a70-80f1-11074386df35",
      method: "GET",
      address: "{{services_url}}/services/get_service_detail/all",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("services_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("services_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("status");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");
              pm.expect(pm.response.text()).to.include("product");
              pm.expect(pm.response.text()).to.include("circuit_id");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("start_date");
              pm.expect(pm.response.text()).to.include("monthly_cost");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/services/get_services_by_location_id/all",
      id: "4726700c-be93-449b-a63f-7dc1ade81f19",
      method: "GET",
      address: "{{services_url}}/services/get_services_by_location_id/all",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("services_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("services_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("status");
              pm.expect(pm.response.text()).to.include("service_id");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("product");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("circuit_id");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/services/get_csps_with_details",
      id: "de1c0415-fa15-4798-81c9-0b8151c4c270",
      method: "GET",
      address: "{{services_url}}/services/get_csps_with_details",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        pm.environment.get("services_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("services_url");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("id");
              pm.expect(pm.response.text()).to.include("csp_image");
              pm.expect(pm.response.text()).to.include("csp_account_name");
              pm.expect(pm.response.text()).to.include("csp_description");
              pm.expect(pm.response.text()).to.include("csp_url");

              pm.expect(pm.response.text()).to.include("details");
              pm.expect(pm.response.text()).to.include("connection_type");
              pm.expect(pm.response.text()).to.include("csp_service_key");
              pm.expect(pm.response.text()).to.include("csp_type_details");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/services/change_service",
      id: "a7887096-1f86-4045-835a-bdd83199f022",
      method: "POST",
      address: "{{services_url}}/services/change_service",
      data:
        '{\r\n  "service_id" : "{{service_id}}",\r\n  "name" : "{{name}}",\r\n  "bandwidth" : "{{bandwidth}}",\r\n  "disconnect_reason" : "{{disconnect_reason}}"\r\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://eh7oy2uyue.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"

        pm.environment.set("service_id", "a0a100000001ab1");
        pm.environment.set("name", "Service Name Change");
        pm.environment.set("bandwidth", "1 Gbps");
        pm.environment.set("disconnect_reason", "Competitive Loss");

        pm.environment.get("services_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://2hj0vrfbme.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("locations_url");

        //environment variables dynamically set via JSON body ("service_id" : "a0a100000001ab1",  "name" : "Service Name Change", "bandwidth" : "1 Gbps", "disconnect_reason" :  "Competitive Loss") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful POST request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("POST request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include(
                "Service has been changed"
              );
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });
  });

  group("/quotes", function() {
    postman[Request]({
      name: "CAPtain/quotes/get_location_quote_by_quote_id/{{quote_id}}",
      id: "beea4ac3-32a9-4dba-87fa-a5e3daaadcf8",
      method: "GET",
      address:
        "{{quotes_url}}/quotes/get_location_quote_by_quote_id/{{quote_id}}",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_id", "1185336");
        pm.environment.get("quotes_url");

        pm.environment.set("quote_id", "1185336");
      },
      post(response) {
        //selected environment variables (URL) which are currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_id", "1185336");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("quote_status");

              pm.expect(pm.response.text()).to.include("location");
              pm.expect(pm.response.text()).to.include("building_id");
              pm.expect(pm.response.text()).to.include("building_name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");
              pm.expect(pm.response.text()).to.include("type");
              pm.expect(pm.response.text()).to.include("network");
              pm.expect(pm.response.text()).to.include("entrance");

              pm.expect(pm.response.text()).to.include("demarc");
              pm.expect(pm.response.text()).to.include("demarc_id");
              pm.expect(pm.response.text()).to.include("demarc");
              pm.expect(pm.response.text()).to.include("operator");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("type");
              pm.expect(pm.response.text()).to.include("network");

              pm.expect(pm.response.text()).to.include("configuration");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("monitoring");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/quotes/get_service_quote_by_quote_id/{{quote_id}}",
      id: "3595ff4e-e1ab-428a-83b4-64662735982e",
      method: "GET",
      address:
        "{{quotes_url}}/quotes/get_service_quote_by_quote_id/{{quote_id}}",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_id", "1185336");
        pm.environment.get("quotes_url");

        pm.environment.set("quote_id", "1185336");
      },
      post(response) {
        //selected environment variables (URL) which are currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_id", "1185336");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("quote_status");

              pm.expect(pm.response.text()).to.include("location");
              pm.expect(pm.response.text()).to.include("location_id");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("building_name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");

              pm.expect(pm.response.text()).to.include("CSP");
              pm.expect(pm.response.text()).to.include("csp_id");
              pm.expect(pm.response.text()).to.include("csp_image");
              pm.expect(pm.response.text()).to.include("csp_account_name");
              pm.expect(pm.response.text()).to.include("type");
              pm.expect(pm.response.text()).to.include("csp_service_key");
              pm.expect(pm.response.text()).to.include("destination_id");
              pm.expect(pm.response.text()).to.include("destination_name");
              pm.expect(pm.response.text()).to.include("street");
              pm.expect(pm.response.text()).to.include("city");
              pm.expect(pm.response.text()).to.include("province_state");
              pm.expect(pm.response.text()).to.include("country");
              pm.expect(pm.response.text()).to.include("postal_code");

              pm.expect(pm.response.text()).to.include("configuration");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("product_category");
              pm.expect(pm.response.text()).to.include("product");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/quotes/get_quotes_by_sfid/{{sfid}}",
      id: "1a3dcea3-38e6-43bf-bac5-15f523cff690",
      method: "GET",
      address: "{{quotes_url}}/quotes/get_quotes_by_sfid/{{sfid}}",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("sfid", "a0b6000000KPEgAAAX");
        pm.environment.get("quotes_url");

        pm.environment.set("sfid", "a0b6000000KPEgAAAX");
      },
      post(response) {
        //selected environment variables (URL) which are currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("sfid", "a0b6000000KPEgAAAX");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("locations");
              pm.expect(pm.response.text()).to.include("quote_id");
              pm.expect(pm.response.text()).to.include("quote_status");
              pm.expect(pm.response.text()).to.include("building_name");
              pm.expect(pm.response.text()).to.include("demarc");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("monthly_cost");
              pm.expect(pm.response.text()).to.include("one_time_cost");

              pm.expect(pm.response.text()).to.include("services");
              pm.expect(pm.response.text()).to.include("quote_id");
              pm.expect(pm.response.text()).to.include("quote_status");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("csp_account_name");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("location_name");
              pm.expect(pm.response.text()).to.include("product_group");
              pm.expect(pm.response.text()).to.include("product");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("monthly_cost");
              pm.expect(pm.response.text()).to.include("one_time_cost");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/quotes/get_costs",
      id: "21d5a6aa-79cc-468d-8025-e6e356ec3beb",
      method: "POST",
      address: "{{quotes_url}}/quotes/get_costs",
      data:
        '{\r\n  "quote_id" : "{{quote_id}}",\r\n  "service_id" : "{{service_id}}",\r\n  "bandwidth" : "{{bandwidth}}",\r\n  "term" : "{{term}}"\r\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"

        pm.environment.set("quote_id", "a0a100000001ab1");
        pm.environment.set("service_id", null);
        pm.environment.set("bandwidth", "1 Gbps");
        pm.environment.set("term", "12 months");

        pm.environment.get("quotes_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("quotes_url")

        //environment variables dynamically set via JSON body ("quote_id" : "a0a100000001ab1", "service_id" : "null", "bandwidth" : "1 Gbps", "term" : "12 months") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful POST request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("POST request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include("monthly_cost");
              pm.expect(pm.response.text()).to.include("one_time_cost");
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/quotes/create_location_quote",
      id: "dc16b557-eb41-4d47-aae3-763252735365",
      method: "POST",
      address: "{{quotes_url}}/quotes/create_location_quote",
      data:
        '{\r\n  "sfid" : "{{sfid}}",\r\n  "building_id" : "{{building_id}}",\r\n  "demarc_id" : "{{demarc_id}}",\r\n  "name" : "{{name}}",\r\n  "bandwidth" : "{{bandwidth}}",\r\n  "term" : "{{term}}",\r\n  "monitoring" : "{{monitoring}}"\r\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"

        pm.environment.set("sfid", "0010a00001abcdef");
        pm.environment.set("building_id", "a0a100000001ab1");
        pm.environment.set("demarc_id", "a0b10000001A1a1");
        pm.environment.set("name", "Port Pop 1");
        pm.environment.set("bandwidth", "10 Gbps");
        pm.environment.set("term", "12 Months");
        pm.environment.set("monitoring", "yes");

        pm.environment.get("quotes_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("quotes_url")

        //environment variables dynamically set via JSON body ("sfid" : "0010a00001abcdef", "building_id" : "a0a100000001ab1", "demarc_id" : "a0b10000001A1a1", "name" : "Port Pop 1", "bandwidth" : "10 Gbps", "term" : "12 Months", "monitoring" : "yes") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful POST request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("POST request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include("quote_id");
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/quotes/create_service_quote",
      id: "effca78e-90da-4985-b527-ca745a8c8bcb",
      method: "POST",
      address: "{{quotes_url}}/quotes/create_service_quote",
      data:
        '{\r\n  "sfid" : "{{sfid}}",\r\n  "location_id" : "{{location_id}}",\r\n  "csp_account_id" : "{{csp_account_id}}",\r\n  "demarc_id" : "{{demarc_id}}",\r\n  "destination_id" : "{{destination_id}}",\r\n  "destination_type" : "{{destination_type}}",\r\n  "name" : "{{name}}",\r\n  "bandwidth" : "{{bandwidth}}",\r\n  "term" : "{{term}}",\r\n  "product" : "{{product}}",\r\n  "csp_service_key" : "{{csp_service_key}}"\r\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"

        pm.environment.set("sfid", "0010a00001abcdef");
        pm.environment.set("location_id", "00a100000001ab1");
        pm.environment.set("csp_account_id", "00b100000001ab1");
        pm.environment.set("demarc_id", "a0b10000001A1a1");
        pm.environment.set("destination_id", "z0b10000001A1a1");
        pm.environment.set("destination_type", "Hosted");
        pm.environment.set("name", "Port Pop 1 AWS");
        pm.environment.set("bandwidth", "1 Gbps");
        pm.environment.set("term", "Month-to-Month");
        pm.environment.set("product", "Ethernet");
        pm.environment.set("csp_service_key", "123456-789-789404890");

        pm.environment.get("quotes_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //function to call is pm.environment.get("quotes_url")

        //environment variables dynamically set via JSON body ("sfid" : "0010a00001abcdef", "location_id" : "00a100000001ab1", "csp_account_id" : "00b100000001ab1", "demarc_id" : "a0b10000001A1a1", "destination_id" : "z0b10000001A1a1", "destination_type" : "Hosted", "name" : "Port Pop 1 AWS", "bandwidth" : "1 Gbps", "term" : "Month-to-Month", "product" : "Ethernet", "csp_service_key" : "123456-789-789404890") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful POST request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("POST request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include("quote_id");
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/quotes/update_quote/{{quote_id}}",
      id: "8258401d-6fc3-4b66-a5eb-a2adbf16fbb1",
      method: "PUT",
      address: "{{quotes_url}}/quotes/update_quote/{{quote_id}}",
      data:
        '{\n  "sfid" : "{{sfid}}",\n  "location_id" : "{{location_id}}",\n  "building_id" : "{{building_id}}",\n  "csp_account_id" : "{{csp_account_id}}",\n  "demarc_id" : "{{demarc_id}}",\n  "destination_id" : "{{destination_id}}",\n  "destination_type" : "{{destination_type}}",\n  "name" : "{{name}}",\n  "bandwidth" : "{{bandwidth}}",\n  "term" : "{{term}}",\n  "product" : "{{product}}",\n  "monitoring" : "{{monitoring}}",\n  "csp_service_key" : "{{csp_service_key}}"\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variables (URL) which are currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_ids", "1185336");

        pm.environment.set("sfid", "0010a00001abcdef");
        pm.environment.set("location_id", "00a100000001ab1");
        pm.environment.set("building_id", null);
        pm.environment.set("csp_account_id", "00b100000001ab1");
        pm.environment.set("demarc_id", "a0b10000001A1a1");
        pm.environment.set("destination_id", "z0b10000001A1a1");
        pm.environment.set("destination_type", "Hosted");
        pm.environment.set("name", "Port Pop 1 AWS");
        pm.environment.set("bandwidth", "1 Gbps");
        pm.environment.set("term", "Month-to-Month");
        pm.environment.set("product", "Ethernet");
        pm.environment.set("monitoring", null);
        pm.environment.set("csp_service_key", "123456-789-789404890");

        pm.environment.get("quotes_url");

        pm.environment.set("quote_id", "1185336");
      },
      post(response) {
        //selected environment variables (URL) which are currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_id", "1185336");

        //environment variables dynamically set via JSON body ("sfid" : "0010a00001abcdef", "location_id" : "00a100000001ab1", "building_id" : "null", "csp_account_id" : "00b100000001ab1", "demarc_id" : "a0b10000001A1a1", "destination_id" : "z0b10000001A1a1", "destination_type" : "Hosted", "name" : "Port Pop 1 AWS", "bandwidth" : "1 Gbps", "term" : "Month-to-Month", "product" : "Ethernet", "monitoring" : "null", "csp_service_key" : "123456-789-789404890") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful PUT request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("PUT request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include("Quote updated");
              pm.expect(pm.response.text()).to.include(
                pm.environment.get("quote_id")
              );
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/quotes/remove_quotes_by_quote_ids",
      id: "edc50114-ab1e-412e-9532-b5211c5664d6",
      method: "PUT",
      address: "{{quotes_url}}/quotes/remove_quotes_by_quote_ids",
      data: '{\n  "quote_ids" : "{{quote_ids}}"\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variables (URL) which are currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_ids", "11234");

        pm.environment.get("quotes_url");

        pm.environment.set("quote_ids", "11234");

        /*can also be set as array via JSON body (example below)
            {
                "quote_ids" : [
                    "11234",
                  	"11235",
                  	"11236",
                  	"11237"
                ]
            }*/
      },
      post(response) {
        //selected environment variables (URL) which are currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jsrdnxbz9a.execute-api.us-east-2.amazonaws.com/Stage/api/v1/"
        //functions to call are pm.environment.get("quotes_url"); and pm.environment.set("quote_ids", "11234");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful PUT request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("PUT request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include(
                "Quote has been removed"
              );
              pm.expect(pm.response.text()).to.include(
                pm.environment.get("quote_ids")
              );
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });
  });

  group("/orders", function() {
    postman[Request]({
      name: "CAPtain/orders/get_orders_by_sfid/{{sfid}}",
      id: "6dfd1b4c-4dda-460a-8c3f-bab78570df31",
      method: "GET",
      address: "{{orders_url}}/orders/get_orders_by_sfid/{{sfid}}",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jeff7p7cr3.execute-api.us-east-2.amazonaws.com/dev/api/v1"
        pm.environment.get("orders_url");

        pm.environment.set("sfid", "0016000000unFcJAAU");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jeff7p7cr3.execute-api.us-east-2.amazonaws.com/dev/api/v1"
        //functions to call are pm.environment.get("orders_url"); and pm.environment.set("sfid", "a0b6000000KPEgAAAX");

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 500)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include("order_number");
              pm.expect(pm.response.text()).to.include("order_date");
              pm.expect(pm.response.text()).to.include("monthly_cost");
              pm.expect(pm.response.text()).to.include("one_time_cost");

              pm.expect(pm.response.text()).to.include("quotes");

              pm.expect(pm.response.text()).to.include("services");
              pm.expect(pm.response.text()).to.include("quote_id");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("csp_account_name");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("location_name");
              pm.expect(pm.response.text()).to.include("product_group");
              pm.expect(pm.response.text()).to.include("product");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("monthly_cost");
              pm.expect(pm.response.text()).to.include("one_time_cost");

              pm.expect(pm.response.text()).to.include("locations");
              pm.expect(pm.response.text()).to.include("quote_id");
              pm.expect(pm.response.text()).to.include("building_name");
              pm.expect(pm.response.text()).to.include("demarc");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("bandwidth");
              pm.expect(pm.response.text()).to.include("term");
              pm.expect(pm.response.text()).to.include("monthly_cost");
              pm.expect(pm.response.text()).to.include("one_time_cost");
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/orders/create_order",
      id: "dae2d30b-726c-4818-9f16-1f58331017d7",
      method: "POST",
      address: "{{orders_url}}/orders/create_order",
      data: '{\r\n  "quote_id" : "{{quote_id}}"\r\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jeff7p7cr3.execute-api.us-east-2.amazonaws.com/dev/api/v1"

        //environment variables set dynamically via JSON body ("quote_id" : "123456789108979410") for stubbed test case

        pm.environment.get("orders_url");

        pm.environment.set("quote_id", "1185336");

        //this one will be an array too
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://jeff7p7cr3.execute-api.us-east-2.amazonaws.com/dev/api/v1
        //function to call is pm.environment.get("orders_url");

        //environment variables set dynamically via JSON body ("quote_id" : "123456789108979410") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful POST request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("POST request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include("order_number");
              pm.expect(pm.response.text()).to.include("date");
            });
            pm.test(
              "Placeholder SLA - Response time is less than 2000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(2000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });
  });

  group("/users", function() {
    postman[Request]({
      name: "CAPtain/users/auth_user",
      id: "ac19e891-072e-4b4d-b3f6-8d2e780d5d93",
      method: "POST",
      address: "{{users_url}}/users/auth_user",
      data:
        '{\r\n  "username" : "{{username}}",\r\n  "password" : "{{password}}"\r\n}',
      headers: {
        "Content-Type": "application/json"
      },
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://f58dmh4t25.execute-api.us-east-2.amazonaws.com/Prod/api/v1"

        pm.environment.set("username", "tranzactdemo@zayo.com");
        pm.environment.set("password", "mockPassword");

        pm.environment.get("users_url");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://f58dmh4t25.execute-api.us-east-2.amazonaws.com/Prod/api/v1"
        //function to call is pm.environment.get("users_url");

        //environment variables dynamically set via JSON body ("username" : "tranzactdemo@zayo.com", "password" : "mockPassword") for stubbed test case

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 201, 202)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Successful POST request", function() {
              pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);
            });

            pm.test("POST request - Response body validation", function() {
              pm.expect(pm.response.text()).to.include("status");
              pm.expect(pm.response.text()).to.include("token");
              pm.expect(pm.response.text()).to.include("exp");
              pm.expect(pm.response.text()).to.include("name");
              pm.expect(pm.response.text()).to.include("given_name");
              pm.expect(pm.response.text()).to.include("family_name");
              pm.expect(pm.response.text()).to.include("preferred_username");
              pm.expect(pm.response.text()).to.include("email");
              pm.expect(pm.response.text()).to.include("email_verified");
              pm.expect(pm.response.text()).to.include("zoneinfo");
              pm.expect(pm.response.text()).to.include("phone_number");

              pm.expect(pm.response.text()).to.include("address");
              pm.expect(pm.response.text()).to.include("street_address");
              pm.expect(pm.response.text()).to.include("locality");
              pm.expect(pm.response.text()).to.include("region");
              pm.expect(pm.response.text()).to.include("postal_code");
              pm.expect(pm.response.text()).to.include("country");

              pm.expect(pm.response.text()).to.include("postal_code");
              pm.expect(pm.response.text()).to.include("updated_at");
              pm.expect(pm.response.text()).to.include("account_id");
              pm.expect(pm.response.text()).to.include("contact_id");
            });
            pm.test(
              "Placeholder SLA - Response time is less than 3000ms",
              function() {
                pm.expect(pm.response.responseTime).to.be.below(3000);
              }
            );
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });

    postman[Request]({
      name: "CAPtain/users/sign_out/{{email}}",
      id: "eb08739d-eb92-4db9-9a89-9e1b2cce8932",
      method: "GET",
      address: "{{users_url}}/users/sign_out/{{email}}",
      pre() {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://f58dmh4t25.execute-api.us-east-2.amazonaws.com/Prod/api/v1"
        //functions to call are pm.environment.get("users_url"); and pm.environment.set("email", "tranzactdemo@zayo.com");

        pm.environment.get("users_url");

        pm.environment.set("email", "tranzactdemo@zayo.com");
      },
      post(response) {
        //selected environment variable (URL) which is currently defaulted to Swagger stubs for initial testing via Pre-request Script
        //current stubbed URL is "https://f58dmh4t25.execute-api.us-east-2.amazonaws.com/Prod/api/v1"
        //functions to call are pm.environment.get("users_url"); and pm.environment.set("email", "tranzactdemo@zayo.com"); for stubbed test case.. currently getting status 400 on this one, likely due to current stubs.. set as placeholder for initial test runs for now

        console.log(responseBody);

        var data = JSON.parse(responseBody);

        if ((responseCode.code === 200, 400)) {
          try {
            var jsonData = JSON.parse(responseBody);

            pm.test("Status code is 200", function() {
              pm.response.to.have.status(200);
            });
            pm.test("Response time is less than 3000ms", function() {
              pm.expect(pm.response.responseTime).to.be.below(3000);
            });

            pm.test("JSON BODY VALIDATION", function() {
              pm.expect(pm.response.text()).to.include(
                "User successfully signed out from system"
              );
            });
          } catch (error) {
            console.log(error);

            //exit;
          }
        }

        //end tests
      }
    });
  });
}
